// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OPUS_ENGINE –≤ opusscript –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonInteraction,
  ButtonStyle,
  ChatInputCommandInteraction,
  ComponentType,
  EmbedBuilder,
  Message
} from 'discord.js'

import {
  AudioPlayer,
  AudioPlayerStatus,
  AudioResource,
  createAudioPlayer,
  createAudioResource,
  entersState,
  joinVoiceChannel,
  NoSubscriberBehavior,
  StreamType,
  VoiceConnection,
  VoiceConnectionStatus
} from '@discordjs/voice'

import { ITrackInfo, YandexMusicService } from './yandex-music.service.js'
import { IYandexTrack } from '../types/yandexTrack.js'

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º OPUS_ENGINE –≤ opusscript
process.env.OPUS_ENGINE = 'opusscript'

// –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º opusscript
let opusscript: any = null
try {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –¥–ª—è ESM
  const opusModule = await import('opusscript')
  opusscript = new opusModule.default(48000, 2, 2048)
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ opusscript:', error)
}

export interface PlayerOptions {
  interaction: ChatInputCommandInteraction
  voiceChannel: any
  accessToken: string
  userId: string
  stationId: string
}

export interface PlayerState {
  isPlaying: boolean
  currentTrack: ITrackInfo | null
  previousTracks: IYandexTrack[]
  trackQueue: IYandexTrack[]
  accessToken: string
  userId: string
  stationId: string
  embedMessage: Message | undefined
  trackStartTime: number | null
  retryCount: number
  lastTrackId: string | null
  skipRequested: boolean
}

export class PlayerService {
  private static instance: PlayerService
  private yandexMusicService: YandexMusicService
  private players: Map<string, AudioPlayer> = new Map()
  private connections: Map<string, VoiceConnection> = new Map()
  private playerStates: Map<string, PlayerState> = new Map()
  private currentResources: Map<string, AudioResource> = new Map()

  private constructor() {
    this.yandexMusicService = YandexMusicService.getInstance()
  }

  public static getInstance(): PlayerService {
    if (!PlayerService.instance) {
      PlayerService.instance = new PlayerService()
    }
    return PlayerService.instance
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–µ–µ—Ä–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
   */
  public async createPlayer(options: PlayerOptions): Promise<{
    player: AudioPlayer
    connection: VoiceConnection
    embedMessage: Message | undefined
  }> {
    const { interaction, voiceChannel, accessToken, userId, stationId } = options
    const guildId = interaction.guild!.id

    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
    const connection = joinVoiceChannel({
      channelId: voiceChannel.id,
      guildId: guildId,
      adapterCreator: interaction.guild!.voiceAdapterCreator
    })

    // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä
    const player = createAudioPlayer({
      behaviors: {
        noSubscriber: NoSubscriberBehavior.Play
      }
    })

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ–µ—Ä
    connection.subscribe(player)

    // –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É
    try {
      await entersState(connection, VoiceConnectionStatus.Ready, 5_000)
    } catch (error) {
      console.log(error)
      connection.destroy()
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É')
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    connection.on(VoiceConnectionStatus.Disconnected, async () => {
      try {
        await Promise.race([
          entersState(connection, VoiceConnectionStatus.Signalling, 5_000),
          entersState(connection, VoiceConnectionStatus.Connecting, 5_000)
        ])
        // –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –∑–Ω–∞—á–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
      } catch (error) {
        // –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        console.log(error)
        connection.destroy()
        this.players.delete(guildId)
        this.connections.delete(guildId)
        this.playerStates.delete(guildId)
        this.currentResources.delete(guildId)
      }
    })

    // –°–æ–∑–¥–∞–µ–º embed –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ
    const embed = new EmbedBuilder()
      .setColor('#FFCC00')
      .setTitle('üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç')
      .setDescription('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞...')
      .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞' })
      .setTimestamp()

    // –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    const row = this.createControlButtons(true)

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    let embedMessage: Message | undefined
    if (interaction.channel && 'send' in interaction.channel) {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º embed, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å
      embedMessage = await interaction.channel.send({
        embeds: [embed],
        components: [row]
      })

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
      this.setupButtonHandler(embedMessage, guildId)
    }

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–ª–µ–µ—Ä –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
    this.players.set(guildId, player)
    this.connections.set(guildId, connection)

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞
    this.playerStates.set(guildId, {
      isPlaying: false,
      currentTrack: null,
      previousTracks: [],
      trackQueue: [],
      accessToken,
      userId,
      stationId,
      embedMessage,
      trackStartTime: null,
      retryCount: 0,
      lastTrackId: null,
      skipRequested: false // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞ —Ç—Ä–µ–∫–∞
    })

    return { player, connection, embedMessage }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  private createControlButtons(isPlaying: boolean): ActionRowBuilder<ButtonBuilder> {
    return new ActionRowBuilder<ButtonBuilder>().addComponents(
      new ButtonBuilder().setCustomId('like').setLabel('üëç').setStyle(ButtonStyle.Secondary),
      new ButtonBuilder().setCustomId('previous').setLabel('‚èÆÔ∏è').setStyle(ButtonStyle.Secondary),
      new ButtonBuilder()
        .setCustomId(isPlaying ? 'pause' : 'play')
        .setLabel(isPlaying ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è')
        .setStyle(ButtonStyle.Secondary),
      new ButtonBuilder().setCustomId('stop').setLabel('‚èπÔ∏è').setStyle(ButtonStyle.Secondary),
      new ButtonBuilder().setCustomId('next').setLabel('‚è≠Ô∏è').setStyle(ButtonStyle.Secondary)
    )
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫
   */
  private setupButtonHandler(message: Message, guildId: string) {
    const collector = message.createMessageComponentCollector({
      componentType: ComponentType.Button,
      time: 3600000 // 1 —á–∞—Å
    })

    collector.on('collect', async (interaction: ButtonInteraction) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–ª–µ–µ—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const player = this.players.get(guildId)
      const playerState = this.playerStates.get(guildId)

      if (!player || !playerState) {
        await interaction.reply({
          content: '–ü–ª–µ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
          ephemeral: true
        })
        return
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏
      switch (interaction.customId) {
        case 'like':
          await this.handleLike(interaction, guildId)
          break
        case 'previous':
          await this.handlePrevious(interaction, guildId)
          break
        case 'pause':
          await this.handlePause(interaction, guildId)
          break
        case 'play':
          await this.handlePlay(interaction, guildId)
          break
        case 'stop':
          await this.handleStop(interaction, guildId)
          break
        case 'next':
          await this.handleNext(interaction, guildId)
          break
      }
    })

    collector.on('end', () => {
      // –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ –∏—Å—Ç–µ—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–ª–ª–µ–∫—Ç–æ—Ä–∞
      if (message.editable) {
        message.edit({ components: [] }).catch(console.error)
      }
    })
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–õ–∞–π–∫"
   */
  private async handleLike(interaction: ButtonInteraction, guildId: string) {
    const playerState = this.playerStates.get(guildId)
    if (!playerState || !playerState.currentTrack) {
      try {
        await interaction.reply({
          content: '–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –¥–ª—è –ª–∞–π–∫–∞.',
          ephemeral: true
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', error)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
      return
    }

    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è
      const success = await this.yandexMusicService.likeTrack(
        playerState.accessToken,
        playerState.userId,
        playerState.currentTrack.id
      )

      try {
        if (success) {
          await interaction.reply({
            content: `–¢—Ä–µ–∫ "${playerState.currentTrack.title}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è!`,
            ephemeral: true
          })
        } else {
          await interaction.reply({
            content: '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è.',
            ephemeral: true
          })
        }
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', replyError)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        // –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ª–∞–π–∫ —Ç—Ä–µ–∫–∞) —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∞–π–∫–∞:', error)
      try {
        await interaction.reply({
          content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∞–π–∫–∞.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –ª–∞–π–∫–∞:', replyError)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫"
   */
  private async handlePrevious(interaction: ButtonInteraction, guildId: string) {
    const playerState = this.playerStates.get(guildId)
    const player = this.players.get(guildId)

    if (!playerState || !player) {
      try {
        await interaction.reply({
          content: '–ü–ª–µ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
          ephemeral: true
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', error)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
      return
    }

    if (playerState.previousTracks.length === 0) {
      try {
        await interaction.reply({
          content: '–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.',
          ephemeral: true
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', error)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
      return
    }

    try {
      // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ç—Ä–µ–∫ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
      const previousTrack = playerState.previousTracks.pop()

      if (previousTrack) {
        // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ –æ—á–µ—Ä–µ–¥–∏
        if (playerState.currentTrack) {
          const currentTrackAsYandexTrack: IYandexTrack = {
            id: playerState.currentTrack.id,
            title: playerState.currentTrack.title,
            artists: [{ name: playerState.currentTrack.artist }],
            albums: [{ title: playerState.currentTrack.album }],
            coverUri: playerState.currentTrack.coverUrl?.replace('https://', '').replace('400x400', '%%') || ''
          }

          playerState.trackQueue.unshift(currentTrackAsYandexTrack)
        }

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫
        const trackInfo = this.yandexMusicService.trackToTrackInfo(previousTrack)
        await this.playTrack(
          player,
          trackInfo,
          playerState.accessToken,
          playerState.stationId,
          playerState.embedMessage
        )

        try {
          await interaction.reply({
            content: '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞.',
            ephemeral: true
          })
        } catch (replyError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', replyError)
          // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          // –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞) —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error)
      try {
        await interaction.reply({
          content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', replyError)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–∞—É–∑–∞"
   */
  private async handlePause(interaction: ButtonInteraction, guildId: string) {
    const player = this.players.get(guildId)
    const playerState = this.playerStates.get(guildId)

    if (!player || !playerState) {
      try {
        await interaction.reply({
          content: '–ü–ª–µ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
          ephemeral: true
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', error)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
      return
    }

    try {
      player.pause()
      playerState.isPlaying = false

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
      if (playerState.embedMessage && playerState.embedMessage.editable) {
        const row = this.createControlButtons(false)
        await playerState.embedMessage.edit({ components: [row] })
      }

      try {
        await interaction.reply({
          content: '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', replyError)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        // –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ø–∞—É–∑–∞) —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error)
      try {
        await interaction.reply({
          content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –ø–∞—É–∑—ã:', replyError)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"
   */
  private async handlePlay(interaction: ButtonInteraction, guildId: string) {
    const player = this.players.get(guildId)
    const playerState = this.playerStates.get(guildId)

    if (!player || !playerState) {
      try {
        await interaction.reply({
          content: '–ü–ª–µ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
          ephemeral: true
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', error)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
      return
    }

    try {
      player.unpause()
      playerState.isPlaying = true

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
      if (playerState.embedMessage && playerState.embedMessage.editable) {
        const row = this.createControlButtons(true)
        await playerState.embedMessage.edit({ components: [row] })
      }

      try {
        await interaction.reply({
          content: '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', replyError)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        // –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è) —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error)
      try {
        await interaction.reply({
          content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', replyError)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–æ–ø"
   */
  private async handleStop(interaction: ButtonInteraction, guildId: string) {
    const player = this.players.get(guildId)
    const connection = this.connections.get(guildId)
    const playerState = this.playerStates.get(guildId)

    if (!player || !connection || !playerState) {
      try {
        await interaction.reply({
          content: '–ü–ª–µ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
          ephemeral: true
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', error)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
      return
    }

    try {
      // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏ –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –∫–∞–Ω–∞–ª–∞
      player.stop()
      connection.destroy()

      // –£–¥–∞–ª—è–µ–º –ø–ª–µ–µ—Ä –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –∫–∞—Ä—Ç
      this.players.delete(guildId)
      this.connections.delete(guildId)
      this.playerStates.delete(guildId)
      this.currentResources.delete(guildId)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (playerState.embedMessage && playerState.embedMessage.editable) {
        const stoppedEmbed = new EmbedBuilder()
          .setColor('#FF0000')
          .setTitle('‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
          .setDescription('–ü–ª–µ–µ—Ä –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
          .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞' })
          .setTimestamp()

        await playerState.embedMessage.edit({ embeds: [stoppedEmbed], components: [] })
      }

      try {
        await interaction.reply({
          content: '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.',
          ephemeral: true
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', error)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–µ–µ—Ä–∞ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error)
      try {
        await interaction.reply({
          content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', replyError)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"
   */
  private async handleNext(interaction: ButtonInteraction, guildId: string) {
    const player = this.players.get(guildId)
    const playerState = this.playerStates.get(guildId)

    if (!player || !playerState) {
      try {
        await interaction.reply({
          content: '–ü–ª–µ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
          ephemeral: true
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', error)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
      return
    }

    try {
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
      playerState.skipRequested = true
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É')

      // –≠–º–∏—Ç–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ Idle, —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
      player.emit(AudioPlayerStatus.Idle)

      try {
        await interaction.reply({
          content: '–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', replyError)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        // –û—Å–Ω–æ–≤–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ (–ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É) —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É:', error)
      try {
        await interaction.reply({
          content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞:', replyError)
        // –ï—Å–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –∏—Å—Ç–µ–∫–ª–æ, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
      }
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
   */
  public updateEmbed(message: Message | undefined, trackInfo: ITrackInfo) {
    if (!message) return

    const updatedEmbed = new EmbedBuilder()
      .setColor('#FFCC00')
      .setTitle('üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç')
      .setDescription(`**${trackInfo.title}**\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${trackInfo.artist}\n–ê–ª—å–±–æ–º: ${trackInfo.album}`)
      .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞' })
      .setTimestamp()

    if (trackInfo.coverUrl) {
      updatedEmbed.setThumbnail(trackInfo.coverUrl)
    }

    message.edit({ embeds: [updatedEmbed] }).catch((error: Error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embed:', error)
    })
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ embed —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
   */
  public updateEmbedWithError(message: Message | undefined, errorMessage: string) {
    if (!message) return

    const errorEmbed = new EmbedBuilder()
      .setColor('#FF0000')
      .setTitle('‚ö†Ô∏è –û—à–∏–±–∫–∞')
      .setDescription(errorMessage)
      .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞' })
      .setTimestamp()

    message.edit({ embeds: [errorEmbed] }).catch((error: Error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embed —Å –æ—à–∏–±–∫–æ–π:', error)
    })
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
   */
  public async playTrack(
    player: AudioPlayer,
    trackInfo: ITrackInfo,
    accessToken: string,
    stationId: string,
    embedMessage: Message | undefined
  ): Promise<boolean> {
    try {
      // –û–±–Ω–æ–≤–ª—è–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞
      if (embedMessage) {
        const loadingEmbed = new EmbedBuilder()
          .setColor('#FFCC00')
          .setTitle('üéµ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞')
          .setDescription(
            `**${trackInfo.title}**\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${trackInfo.artist}\n–ê–ª—å–±–æ–º: ${trackInfo.album}\n\n–ó–∞–≥—Ä—É–∑–∫–∞...`
          )
          .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞' })
          .setTimestamp()

        if (trackInfo.coverUrl) {
          loadingEmbed.setThumbnail(trackInfo.coverUrl)
        }

        await embedMessage.edit({ embeds: [loadingEmbed] }).catch((error: Error) => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥—Ä—É–∑–∫–µ:', error)
        })
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–¥–±—ç–∫ –æ –Ω–∞—á–∞–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
      await this.yandexMusicService.sendTrackStartedFeedback(accessToken, stationId, trackInfo.id)

      // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —Ç—Ä–µ–∫–∞
      const streamUrl = await this.yandexMusicService.getStreamUrl(accessToken, trackInfo.id)
      if (!streamUrl) {
        console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Ç—Ä–µ–∫–∞: ${trackInfo.title}`)
        if (embedMessage) {
          this.updateEmbedWithError(embedMessage, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Ç—Ä–µ–∫–∞: ${trackInfo.title}`)
        }
        return false
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ URL
      console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è —Ç—Ä–µ–∫–∞: ${trackInfo.title}`)
      console.log(`Stream URL: ${streamUrl}`)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω opusscript
      if (!opusscript) {
        console.warn('opusscript –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º')
      }

      // –°–æ–∑–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      const resource = createAudioResource(streamUrl, {
        inputType: StreamType.Arbitrary, // –ò—Å–ø–æ–ª—å–∑—É–µ–º Arbitrary –¥–ª—è –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
        inlineVolume: true,
        silencePaddingFrames: 5 // –£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞–¥—Ä–æ–≤ —Ç–∏—à–∏–Ω—ã
      })

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥—Ä–æ–º–∫–æ—Å—Ç—å –Ω–∞ 80% –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∏—Å–∫–∞–∂–µ–Ω–∏–π
      if (resource.volume) {
        resource.volume.setVolume(0.8)
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—Å—É—Ä—Å –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç—Ä–µ–∫–µ
      const guildId = embedMessage?.guild?.id
      if (guildId) {
        this.currentResources.set(guildId, resource)

        const playerState = this.playerStates.get(guildId)
        if (playerState) {
          // –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –∏—Å—Ç–æ—Ä–∏—é
          if (playerState.currentTrack) {
            const currentTrackAsYandexTrack: IYandexTrack = {
              id: playerState.currentTrack.id,
              title: playerState.currentTrack.title,
              artists: [{ name: playerState.currentTrack.artist }],
              albums: [{ title: playerState.currentTrack.album }],
              coverUri: playerState.currentTrack.coverUrl?.replace('https://', '').replace('400x400', '%%') || ''
            }

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 —Ç—Ä–µ–∫–∞–º–∏
            if (playerState.previousTracks.length >= 10) {
              playerState.previousTracks.shift()
            }

            playerState.previousTracks.push(currentTrackAsYandexTrack)
          }

          // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫
          playerState.currentTrack = trackInfo
          playerState.isPlaying = true

          // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
          if (playerState.embedMessage && playerState.embedMessage.editable) {
            const row = this.createControlButtons(true)
            await playerState.embedMessage.edit({ components: [row] })
          }
        }
      }

      // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ —Å –Ω–µ–±–æ–ª—å—à–æ–π –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      console.log(`–ù–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: ${trackInfo.title}`)

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
      console.log('–û–∂–∏–¥–∞–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º...')

      // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞
      resource.playStream.on('error', err => {
        console.error('–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', err)
      })

      setTimeout(() => {
        try {
          console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...')
          player.play(resource)
          console.log(`–ö–æ–º–∞–Ω–¥–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Ç—Ä–µ–∫–∞: ${trackInfo.title}`)
        } catch (error) {
          // –ü—Ä–∏–≤–æ–¥–∏–º –æ—à–∏–±–∫—É –∫ —Ç–∏–ø—É Error –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–≤–æ–π—Å—Ç–≤—É message
          const playError = error instanceof Error ? error : new Error(String(error))
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', playError)
          if (embedMessage) {
            this.updateEmbedWithError(embedMessage, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${playError.message}`)
          }
        }
      }, 2000) // –£–º–µ–Ω—å—à–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –¥–æ 2 —Å–µ–∫—É–Ω–¥

      // –û–±–Ω–æ–≤–ª—è–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
      this.updateEmbed(embedMessage, trackInfo)

      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
      const playerState = this.playerStates.get(guildId as any)
      if (playerState) {
        playerState.trackStartTime = Date.now()
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ id –Ω–µ undefined –∏ –Ω–µ null
        if (trackInfo.id) {
          playerState.lastTrackId = trackInfo.id
        } else {
          playerState.lastTrackId = null
        }
        playerState.retryCount = 0 // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
      }

      return true
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞:', error)
      if (embedMessage) {
        this.updateEmbedWithError(embedMessage, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: ${trackInfo.title}`)
      }
      return false
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
   */
  public setupInfinitePlayback(
    player: AudioPlayer,
    accessToken: string,
    stationId: string,
    embedMessage: Message | undefined,
    initialTracks: IYandexTrack[]
  ) {
    const guildId = embedMessage?.guild?.id
    if (!guildId) return

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å —Ç—Ä–µ–∫–æ–≤ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø–ª–µ–µ—Ä–∞
    const playerState = this.playerStates.get(guildId)
    if (playerState) {
      playerState.trackQueue = [...initialTracks]
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤
    const loadMoreTracks = async () => {
      try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏...')
        const newTracks = await this.yandexMusicService.getStationTracks(accessToken, stationId)

        const playerState = this.playerStates.get(guildId)
        if (playerState && newTracks && newTracks.length > 0) {
          // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ –≤ –æ—á–µ—Ä–µ–¥—å
          playerState.trackQueue.push(...newTracks)
          console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${newTracks.length} –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å`)
          return true
        }
        return false
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤:', error)
        return false
      }
    }

    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    player.removeAllListeners(AudioPlayerStatus.Idle)
    player.removeAllListeners('error')

    // –§–ª–∞–≥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞
    let isLoadingTrack = false

    // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (10 —Å–µ–∫—É–Ω–¥)
    // –ï—Å–ª–∏ —Ç—Ä–µ–∫ –∏–≥—Ä–∞–ª –º–µ–Ω—å—à–µ —ç—Ç–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ –±—ã–ª–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ, –∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
    const MIN_PLAY_TIME = 10000

    // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
    const MAX_RETRY_COUNT = 5

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–ª–µ–µ—Ä–∞
    player.on(AudioPlayerStatus.Playing, () => {
      console.log('–ü–ª–µ–µ—Ä –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Playing')

      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞
      const playerState = this.playerStates.get(guildId)
      if (playerState && playerState.currentTrack) {
        console.log(`–¢—Ä–µ–∫ "${playerState.currentTrack.title}" —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ`)
      }
    })

    player.on(AudioPlayerStatus.Buffering, () => {
      console.log('–ü–ª–µ–µ—Ä –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Buffering')
    })

    player.on(AudioPlayerStatus.AutoPaused, () => {
      console.log('–ü–ª–µ–µ—Ä –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AutoPaused')
    })

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    player.on('error', error => {
      console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error)
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(error, null, 2))

      // –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞—É–¥–∏–æ-–¥–≤–∏–∂–∫–∞
      console.log('–¢–µ–∫—É—â–∏–π OPUS_ENGINE –ø—Ä–∏ –æ—à–∏–±–∫–µ:', process.env.OPUS_ENGINE)

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω opusscript
      if (opusscript) {
        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π opusscript –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ')
      } else {
        console.warn('opusscript –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º')
      }

      const playerState = this.playerStates.get(guildId)
      if (!playerState || !playerState.currentTrack) {
        console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞ –∏–ª–∏ —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ')
        return
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
      if (embedMessage) {
        const errorEmbed = new EmbedBuilder()
          .setColor('#FFA500') // –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
          .setTitle('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º')
          .setDescription(
            `–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞ "${playerState.currentTrack.title}". –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...`
          )
          .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞ - –ú–æ—è –≤–æ–ª–Ω–∞' })
          .setTimestamp()

        embedMessage.edit({ embeds: [errorEmbed] }).catch((error: Error) => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embed —Å –æ—à–∏–±–∫–æ–π:', error)
        })
      }

      // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        if (playerState.retryCount < MAX_RETRY_COUNT && playerState.currentTrack) {
          console.log(
            `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: ${playerState.currentTrack.title} (–ø–æ–ø—ã—Ç–∫–∞ ${playerState.retryCount + 1}/${MAX_RETRY_COUNT})`
          )
          playerState.retryCount++
          this.playTrack(player, playerState.currentTrack, accessToken, stationId, embedMessage)
        } else {
          // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
          console.log('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É')
          isLoadingTrack = false
          player.emit(AudioPlayerStatus.Idle)
        }
      }, 5000)
    })

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞
    player.on(AudioPlayerStatus.Idle, async () => {
      const playerState = this.playerStates.get(guildId)
      if (!playerState) return

      // –ï—Å–ª–∏ –º—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
      if (isLoadingTrack) {
        console.log('–£–∂–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ Idle')
        return
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —ç—Ç–æ –∫—Ä–∞—Ç–∫–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ
      const currentTime = Date.now()
      const playTime = playerState.trackStartTime ? currentTime - playerState.trackStartTime : 0

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω –ø—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
      if (playerState.skipRequested) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è')
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø—Ä–æ–ø—É—Å–∫–∞ —Ç—Ä–µ–∫–∞
        playerState.skipRequested = false
      }
      // –ï—Å–ª–∏ —Ç—Ä–µ–∫ –∏–≥—Ä–∞–ª –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫,
      // –∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞),
      // –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–∫–∞,
      // –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –µ–≥–æ
      else if (
        playTime < MIN_PLAY_TIME &&
        playTime > 0 &&
        playerState.currentTrack &&
        playerState.retryCount < MAX_RETRY_COUNT
      ) {
        console.log(
          `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: ${playerState.currentTrack.title} –ø–æ—Å–ª–µ ${playTime}ms`
        )
        console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (${playerState.retryCount + 1}/${MAX_RETRY_COUNT})`)

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫
        playerState.retryCount++

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
        if (playerState.retryCount >= MAX_RETRY_COUNT) {
          console.log(
            `–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ç—Ä–µ–∫–∞: ${playerState.currentTrack.title}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É`
          )

          // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
          isLoadingTrack = false

          // –ï—Å–ª–∏ –≤ –æ—á–µ—Ä–µ–¥–∏ –µ—Å—Ç—å —Ç—Ä–µ–∫–∏, –±–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π
          if (playerState.trackQueue.length > 0) {
            const nextTrack = playerState.trackQueue.shift()
            if (nextTrack) {
              const nextTrackInfo = this.yandexMusicService.trackToTrackInfo(nextTrack)
              this.playTrack(player, nextTrackInfo, accessToken, stationId, embedMessage)
            }
          } else {
            // –ï—Å–ª–∏ –æ—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏
            loadMoreTracks().then(loaded => {
              if (loaded && playerState.trackQueue.length > 0) {
                const nextTrack = playerState.trackQueue.shift()
                if (nextTrack) {
                  const nextTrackInfo = this.yandexMusicService.trackToTrackInfo(nextTrack)
                  this.playTrack(player, nextTrackInfo, accessToken, stationId, embedMessage)
                }
              }
            })
          }
          return
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
        if (embedMessage) {
          const reconnectEmbed = new EmbedBuilder()
            .setColor('#FFA500') // –û—Ä–∞–Ω–∂–µ–≤—ã–π —Ü–≤–µ—Ç –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
            .setTitle('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
            .setDescription(`–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ "${playerState.currentTrack.title}"...`)
            .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞' })
            .setTimestamp()

          if (playerState.currentTrack.coverUrl) {
            reconnectEmbed.setThumbnail(playerState.currentTrack.coverUrl)
          }

          embedMessage.edit({ embeds: [reconnectEmbed] }).catch((error: Error) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:', error)
          })
        }

        // –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
        setTimeout(() => {
          if (playerState.currentTrack) {
            this.playTrack(player, playerState.currentTrack, accessToken, stationId, embedMessage)
          }
        }, 10000)

        return
      }

      // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –∏–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫,
      // –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
      console.log('–¢—Ä–µ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å')
      console.log(`–¢—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: ${playerState.trackQueue.length}`)

      if (playerState.trackQueue.length > 0) {
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        isLoadingTrack = true

        try {
          // –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
          const nextTrack = playerState.trackQueue.shift()
          if (nextTrack) {
            console.log(`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞: ${nextTrack.title}`)
            const nextTrackInfo = this.yandexMusicService.trackToTrackInfo(nextTrack)

            const success = await this.playTrack(player, nextTrackInfo, accessToken, stationId, embedMessage)
            if (!success) {
              console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫: ${nextTrack.title}, –∂–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π`)

              // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫, –∂–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π
              setTimeout(() => {
                isLoadingTrack = false
                player.emit(AudioPlayerStatus.Idle)
              }, 3000)
            } else {
              // –ï—Å–ª–∏ —Ç—Ä–µ–∫ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
              isLoadingTrack = false
            }
          } else {
            isLoadingTrack = false
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error)
          isLoadingTrack = false
        }
      } else {
        console.log('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏')

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        isLoadingTrack = true

        try {
          const loaded = await loadMoreTracks()
          if (loaded) {
            // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
            setTimeout(() => {
              isLoadingTrack = false
              player.emit(AudioPlayerStatus.Idle)
            }, 1000)
          } else {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ')
            if (embedMessage) {
              const finalEmbed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
                .setDescription('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏.')
                .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞' })
                .setTimestamp()

              embedMessage.edit({ embeds: [finalEmbed], components: [] }).catch((error: Error) => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embed:', error)
              })
            }
            isLoadingTrack = false
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤:', error)
          isLoadingTrack = false
        }
      }
    })
  }
}
