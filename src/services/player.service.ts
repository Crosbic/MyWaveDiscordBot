import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonInteraction,
  ButtonStyle,
  ComponentType,
  EmbedBuilder,
  Message
} from 'discord.js'

import {
  AudioPlayer,
  AudioPlayerStatus,
  AudioResource,
  createAudioPlayer,
  createAudioResource,
  entersState,
  joinVoiceChannel,
  NoSubscriberBehavior,
  StreamType,
  VoiceConnection,
  VoiceConnectionStatus
} from '@discordjs/voice'

import { DatabaseService } from './database.service.js'
import { YandexMusicService } from './yandex-music.service.js'
import { IPlayerOptions } from '../types/playerOptions.js'
import { IPlayerState } from '../types/playerState.js'
import { ITrackInfo } from '../types/trackInfo.js'
import { IYandexTrack } from '../types/yandexTrack.js'
import config from '../config.js'

process.env.OPUS_ENGINE = 'opusscript'

let opusscript: any = null
try {
  const opusModule = await import('opusscript')
  opusscript = new opusModule.default(48000, 2, 2048)
} catch (error) {
  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ opusscript:', error)
}

export class PlayerService {
  private static instance: PlayerService
  private yandexMusicService: YandexMusicService
  private players: Map<string, AudioPlayer> = new Map()
  private connections: Map<string, VoiceConnection> = new Map()
  private playerStates: Map<string, IPlayerState> = new Map()
  private currentResources: Map<string, AudioResource> = new Map()
  private inactivityTimers: Map<string, NodeJS.Timeout> = new Map()
  private pauseTimers: Map<string, NodeJS.Timeout> = new Map()
  private serverButtonsAccess: Map<string, boolean> = new Map()

  private readonly EMPTY_CHANNEL_TIMEOUT = 20000
  private readonly NO_PLAYBACK_TIMEOUT = 30000

  private constructor() {
    this.yandexMusicService = YandexMusicService.getInstance()
  }

  public static getInstance(): PlayerService {
    if (!PlayerService.instance) {
      PlayerService.instance = new PlayerService()
    }
    return PlayerService.instance
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–µ—Ä –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞
   * @param guildId ID —Å–µ—Ä–≤–µ—Ä–∞
   * @returns –û–±—ä–µ–∫—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–ª–µ–µ—Ä–µ –∏–ª–∏ null, –µ—Å–ª–∏ –ø–ª–µ–µ—Ä –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
   */
  public isPlayerActive(guildId: string): { active: boolean; discordUserId?: string } {
    const player = this.players.get(guildId)
    const playerState = this.playerStates.get(guildId)

    if (!player || !playerState) {
      return { active: false }
    }

    return {
      active: true,
      discordUserId: playerState.discordUserId
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–µ–µ—Ä–∞ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
   */
  public async createPlayer(options: IPlayerOptions): Promise<{
    player: AudioPlayer
    connection: VoiceConnection
    embedMessage: Message | undefined
  }> {
    const { interaction, voiceChannel, accessToken, userId, stationId } = options
    const guildId = interaction.guild!.id

    const connection = joinVoiceChannel({
      channelId: voiceChannel.id,
      guildId: guildId,
      adapterCreator: interaction.guild!.voiceAdapterCreator
    })

    const player = createAudioPlayer({
      behaviors: {
        noSubscriber: NoSubscriberBehavior.Play
      }
    })

    connection.subscribe(player)

    try {
      await entersState(connection, VoiceConnectionStatus.Ready, 5_000)
    } catch (error) {
      console.log(error)
      connection.destroy()
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É')
    }

    connection.on(VoiceConnectionStatus.Disconnected, async () => {
      try {
        await Promise.race([
          entersState(connection, VoiceConnectionStatus.Signalling, 5_000),
          entersState(connection, VoiceConnectionStatus.Connecting, 5_000)
        ])
      } catch (error) {
        console.log(error)
        this.cleanupPlayer(guildId)
      }
    })

    const embed = new EmbedBuilder()
      .setColor('#FFCC00')
      .setTitle('üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç')
      .setDescription('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞...')
      .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞' })
      .setTimestamp()

    const row = this.createControlButtons(true)

    let embedMessage: Message | undefined
    if (interaction.channel && 'send' in interaction.channel) {
      embedMessage = await interaction.channel.send({
        embeds: [embed],
        components: [row]
      })

      this.setupButtonHandler(embedMessage, guildId)
    }

    this.players.set(guildId, player)
    this.connections.set(guildId, connection)

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–µ–µ—Ä–∞
    const publicButtonsAccess = this.serverButtonsAccess.has(guildId) ? this.serverButtonsAccess.get(guildId) : false

    this.playerStates.set(guildId, {
      isPlaying: false,
      currentTrack: null,
      previousTracks: [],
      trackQueue: [],
      accessToken,
      userId,
      discordUserId: interaction.user.id,
      stationId,
      embedMessage,
      trackStartTime: null,
      retryCount: 0,
      lastTrackId: null,
      skipRequested: false,
      publicButtonsAccess // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    })

    this.startActivityChecks(guildId, voiceChannel)

    return { player, connection, embedMessage }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
   */
  private createControlButtons(isPlaying: boolean): ActionRowBuilder<ButtonBuilder> {
    return new ActionRowBuilder<ButtonBuilder>().addComponents(
      new ButtonBuilder().setCustomId('like').setLabel('üëç').setStyle(ButtonStyle.Secondary),
      new ButtonBuilder().setCustomId('previous').setLabel('‚èÆÔ∏è').setStyle(ButtonStyle.Secondary),
      new ButtonBuilder()
        .setCustomId(isPlaying ? 'pause' : 'play')
        .setLabel(isPlaying ? '‚è∏Ô∏è' : '‚ñ∂Ô∏è')
        .setStyle(ButtonStyle.Secondary),
      new ButtonBuilder().setCustomId('stop').setLabel('‚èπÔ∏è').setStyle(ButtonStyle.Secondary),
      new ButtonBuilder().setCustomId('next').setLabel('‚è≠Ô∏è').setStyle(ButtonStyle.Secondary)
    )
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫
   */
  private setupButtonHandler(message: Message, guildId: string) {
    console.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–æ–∫')

    const collector = message.createMessageComponentCollector({
      componentType: ComponentType.Button,
      time: 86400000
    })

    console.log('–ö–æ–ª–ª–µ–∫—Ç–æ—Ä –∫–Ω–æ–ø–æ–∫ —Å–æ–∑–¥–∞–Ω')

    collector.on('collect', async (interaction: ButtonInteraction) => {
      const player = this.players.get(guildId)
      const playerState = this.playerStates.get(guildId)
      const connection = this.connections.get(guildId)

      if (!player || !playerState || !connection) {
        await interaction.reply({
          content: '–ü–ª–µ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
          ephemeral: true
        })
        return
      }

      const isOwner = interaction.user.id === playerState.discordUserId
      const isGlobalAdmin =
        config.admins.includes(interaction.user.id) || config.admins.includes(interaction.user.username)
      const isServerAdmin = interaction.memberPermissions?.has('Administrator') || false
      const isLikeButton = interaction.customId === 'like'
      const isPublicAccessEnabled = this.isPublicButtonsAccessEnabled(guildId)
      let isInSameVoiceChannel = false

      if (interaction.guild) {
        const botVoiceChannelId = connection.joinConfig.channelId
        const guildMember = await interaction.guild.members.fetch(interaction.user.id).catch(() => null)

        isInSameVoiceChannel = guildMember?.voice.channelId === botVoiceChannelId
      }

      // –†–∞–∑—Ä–µ—à–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏:
      // 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü –ø–ª–µ–µ—Ä–∞, –∏–ª–∏
      // 2. –≠—Ç–æ –∫–Ω–æ–ø–∫–∞ "–õ–∞–π–∫" (–µ–µ –º–æ–∂–Ω–æ –Ω–∞–∂–∏–º–∞—Ç—å –≤—Å–µ–º), –∏–ª–∏
      // 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∞–¥–º–∏–Ω (–∏–∑ —Å–ø–∏—Å–∫–∞ ADMINS), –∏–ª–∏
      // 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–µ—Ä–≤–µ—Ä–∞, –∏–ª–∏
      // 5. –†–µ–∂–∏–º –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –≤–∫–ª—é—á–µ–Ω –ò –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ç–æ–º –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
      if (
        !isOwner &&
        !isLikeButton &&
        !isGlobalAdmin &&
        !isServerAdmin &&
        !(isPublicAccessEnabled && isInSameVoiceChannel)
      ) {
        let errorMessage = ''

        if (isPublicAccessEnabled) {
          errorMessage = '–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ —Ç–æ–º –∂–µ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ –∏ –±–æ—Ç, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–ª–µ–µ—Ä–æ–º.'
        } else {
          errorMessage =
            '–¢–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∑–∞–ø—É—Å—Ç–∏–≤—à–∏–π –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ, –º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –ø–ª–µ–µ—Ä–æ–º. –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–≥—É—Ç –≤–∫–ª—é—á–∏—Ç—å –æ–±—â–∏–π –¥–æ—Å—Ç—É–ø –∫ –∫–Ω–æ–ø–∫–∞–º —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /allow-buttons.'
        }

        await interaction.reply({
          content: errorMessage,
          ephemeral: true
        })
        return
      }

      switch (interaction.customId) {
        case 'like':
          await this.handleLike(interaction, guildId)
          break
        case 'previous':
          await this.handlePrevious(interaction, guildId)
          break
        case 'pause':
          await this.handlePause(interaction, guildId)
          break
        case 'play':
          await this.handlePlay(interaction, guildId)
          break
        case 'stop':
          await this.handleStop(interaction, guildId)
          break
        case 'next':
          await this.handleNext(interaction, guildId)
          break
      }
    })

    collector.on('end', () => {
      if (message.editable) {
        message.edit({ components: [] }).catch(console.error)
      }
    })
  }

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–Ω–æ–ø–∫–∞–º –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞
   */
  public setPublicButtonsAccess(guildId: string, enabled: boolean): boolean {
    this.serverButtonsAccess.set(guildId, enabled)

    const playerState = this.playerStates.get(guildId)
    if (playerState) {
      playerState.publicButtonsAccess = enabled
    }

    return true
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω –ª–∏ —Ä–µ–∂–∏–º –ø—É–±–ª–∏—á–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–Ω–æ–ø–∫–∞–º –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞
   */
  public isPublicButtonsAccessEnabled(guildId: string): boolean {
    if (this.serverButtonsAccess.has(guildId)) {
      return this.serverButtonsAccess.get(guildId) as boolean
    }

    const playerState = this.playerStates.get(guildId)
    return playerState ? !!playerState.publicButtonsAccess : false
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–õ–∞–π–∫"
   * –î–æ–±–∞–≤–ª—è–µ—Ç —Ç—Ä–µ–∫ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É
   */
  private async handleLike(interaction: ButtonInteraction, guildId: string) {
    const playerState = this.playerStates.get(guildId)
    if (!playerState || !playerState.currentTrack) {
      try {
        await interaction.reply({
          content: '–ù–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞ –¥–ª—è –ª–∞–π–∫–∞.',
          ephemeral: true
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', error)
      }
      return
    }

    try {
      if (!playerState.currentTrack.id) {
        await interaction.reply({
          content: `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ "${playerState.currentTrack.title}" –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è: ID —Ç—Ä–µ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω.`,
          ephemeral: true
        })
        return
      }

      const clickedUserId = interaction.user.id

      const db = DatabaseService.getInstance()

      if (!db.hasUserToken(clickedUserId)) {
        await interaction.reply({
          content: '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/login` –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.',
          ephemeral: true
        })
        return
      }

      const userData = db.getUserData(clickedUserId)
      if (!userData) {
        await interaction.reply({
          content:
            '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–π—Ç–∏ –∏ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥ `/logout` –∏ `/login`.',
          ephemeral: true
        })
        return
      }

      const success = await this.yandexMusicService.likeTrack(
        userData.accessToken,
        userData.userInfo.id,
        playerState.currentTrack.id
      )

      try {
        if (success) {
          await interaction.reply({
            content: `–¢—Ä–µ–∫ "${playerState.currentTrack.title}" –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —É ${userData.userInfo.nickName}!`,
            ephemeral: true
          })
        } else {
          await interaction.reply({
            content: `–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å —Ç—Ä–µ–∫ "${playerState.currentTrack.title}" –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —É ${userData.userInfo.nickName}.`,
            ephemeral: true
          })
        }
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', replyError)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∞–π–∫–∞:', error)
      try {
        await interaction.reply({
          content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ª–∞–π–∫–∞.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –ª–∞–π–∫–∞:', replyError)
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫"
   */
  private async handlePrevious(interaction: ButtonInteraction, guildId: string) {
    const playerState = this.playerStates.get(guildId)
    const player = this.players.get(guildId)

    if (!playerState || !player) {
      try {
        await interaction.reply({
          content: '–ü–ª–µ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
          ephemeral: true
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', error)
      }
      return
    }

    if (playerState.previousTracks.length === 0) {
      try {
        await interaction.reply({
          content: '–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Ç—Ä–µ–∫–æ–≤ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.',
          ephemeral: true
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', error)
      }
      return
    }

    try {
      const previousTrack = playerState.previousTracks.pop()

      if (previousTrack) {
        if (playerState.currentTrack) {
          const currentTrackAsYandexTrack: IYandexTrack = {
            id: playerState.currentTrack.id,
            title: playerState.currentTrack.title,
            artists: [{ name: playerState.currentTrack.artist }],
            albums: [{ title: playerState.currentTrack.album }],
            coverUri: playerState.currentTrack.coverUrl?.replace('https://', '').replace('400x400', '%%') || ''
          }

          playerState.trackQueue.unshift(currentTrackAsYandexTrack)
        }

        const trackInfo = this.yandexMusicService.trackToTrackInfo(previousTrack)
        await this.playTrack(
          player,
          trackInfo,
          playerState.accessToken,
          playerState.stationId,
          playerState.embedMessage
        )

        try {
          await interaction.reply({
            content: '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞.',
            ephemeral: true
          })
        } catch (replyError) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', replyError)
        }
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error)
      try {
        await interaction.reply({
          content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ç—Ä–µ–∫–∞.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', replyError)
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ü–∞—É–∑–∞"
   */
  private async handlePause(interaction: ButtonInteraction, guildId: string) {
    const player = this.players.get(guildId)
    const playerState = this.playerStates.get(guildId)

    if (!player || !playerState) {
      try {
        await interaction.reply({
          content: '–ü–ª–µ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
          ephemeral: true
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', error)
      }
      return
    }

    try {
      player.pause()
      playerState.isPlaying = false

      if (playerState.embedMessage && playerState.embedMessage.editable) {
        try {
          console.log('–û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –ø–∞—É–∑—É')
          const row = this.createControlButtons(false)
          await playerState.embedMessage.edit({ components: [row] })
          console.log('–ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫:', error)
        }
      }

      try {
        await interaction.reply({
          content: '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', replyError)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error)
      try {
        await interaction.reply({
          content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –ø–∞—É–∑—ã:', replyError)
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ"
   */
  private async handlePlay(interaction: ButtonInteraction, guildId: string) {
    const player = this.players.get(guildId)
    const playerState = this.playerStates.get(guildId)

    if (!player || !playerState) {
      try {
        await interaction.reply({
          content: '–ü–ª–µ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
          ephemeral: true
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', error)
      }
      return
    }

    try {
      player.unpause()
      playerState.isPlaying = true

      if (playerState.embedMessage && playerState.embedMessage.editable) {
        try {
          console.log('–û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ')
          const row = this.createControlButtons(true)
          await playerState.embedMessage.edit({ components: [row] })
          console.log('–ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫:', error)
        }
      }

      try {
        await interaction.reply({
          content: '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', replyError)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error)
      try {
        await interaction.reply({
          content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', replyError)
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°—Ç–æ–ø"
   */
  private async handleStop(interaction: ButtonInteraction, guildId: string) {
    const player = this.players.get(guildId)
    const connection = this.connections.get(guildId)
    const playerState = this.playerStates.get(guildId)

    if (!player || !connection || !playerState) {
      try {
        await interaction.reply({
          content: '–ü–ª–µ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
          ephemeral: true
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', error)
      }
      return
    }

    try {
      player.stop()
      connection.destroy()

      this.cleanupPlayer(guildId)

      if (playerState.embedMessage && playerState.embedMessage.editable) {
        const stoppedEmbed = new EmbedBuilder()
          .setColor('#FF0000')
          .setTitle('‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
          .setDescription('–ü–ª–µ–µ—Ä –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.')
          .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞' })
          .setTimestamp()

        await playerState.embedMessage.edit({ embeds: [stoppedEmbed], components: [] })
      }

      try {
        await interaction.reply({
          content: '–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.',
          ephemeral: true
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', error)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error)
      try {
        await interaction.reply({
          content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:', replyError)
      }
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫"
   */
  private async handleNext(interaction: ButtonInteraction, guildId: string) {
    const player = this.players.get(guildId)
    const playerState = this.playerStates.get(guildId)

    if (!player || !playerState) {
      try {
        await interaction.reply({
          content: '–ü–ª–µ–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.',
          ephemeral: true
        })
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', error)
      }
      return
    }

    try {
      playerState.skipRequested = true
      console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É')

      player.emit(AudioPlayerStatus.Idle)

      try {
        await interaction.reply({
          content: '–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ:', replyError)
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É:', error)
      try {
        await interaction.reply({
          content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É.',
          ephemeral: true
        })
      } catch (replyError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ—Ö–æ–¥–∞:', replyError)
      }
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
   */
  public updateEmbed(message: Message | undefined, trackInfo: ITrackInfo) {
    if (!message) return

    const guildId = message.guild?.id
    if (!guildId) return

    const playerState = this.playerStates.get(guildId)
    if (!playerState) return

    const updatedEmbed = new EmbedBuilder()
      .setColor('#FFCC00')
      .setTitle('üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç')
      .setDescription(`**${trackInfo.title}**\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${trackInfo.artist}\n–ê–ª—å–±–æ–º: ${trackInfo.album}`)
      .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞' })
      .setTimestamp()

    if (trackInfo.coverUrl) {
      updatedEmbed.setThumbnail(trackInfo.coverUrl)
    }

    message.edit({ embeds: [updatedEmbed] }).catch((error: Error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embed:', error)
    })
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ embed —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± –æ—à–∏–±–∫–µ
   */
  public updateEmbedWithError(message: Message | undefined, errorMessage: string) {
    if (!message) return

    const errorEmbed = new EmbedBuilder()
      .setColor('#FF0000')
      .setTitle('‚ö†Ô∏è –û—à–∏–±–∫–∞')
      .setDescription(errorMessage)
      .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞' })
      .setTimestamp()

    message.edit({ embeds: [errorEmbed] }).catch((error: Error) => {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embed —Å –æ—à–∏–±–∫–æ–π:', error)
    })
  }

  /**
   * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞
   */
  public async playTrack(
    player: AudioPlayer,
    trackInfo: ITrackInfo,
    accessToken: string,
    stationId: string,
    embedMessage: Message | undefined
  ): Promise<boolean> {
    try {
      if (embedMessage) {
        const loadingEmbed = new EmbedBuilder()
          .setColor('#FFCC00')
          .setTitle('üéµ –ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞')
          .setDescription(
            `**${trackInfo.title}**\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${trackInfo.artist}\n–ê–ª—å–±–æ–º: ${trackInfo.album}\n\n–ó–∞–≥—Ä—É–∑–∫–∞...`
          )
          .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞' })
          .setTimestamp()

        if (trackInfo.coverUrl) {
          loadingEmbed.setThumbnail(trackInfo.coverUrl)
        }

        await embedMessage.edit({ embeds: [loadingEmbed] }).catch((error: Error) => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–≥—Ä—É–∑–∫–µ:', error)
        })
      }

      if (trackInfo.id) {
        await this.yandexMusicService.sendTrackStartedFeedback(accessToken, stationId, trackInfo.id)
      }

      if (!trackInfo.id) {
        console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Ç—Ä–µ–∫–∞: ${trackInfo.title} (ID —Ç—Ä–µ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)`)
        if (embedMessage) {
          this.updateEmbedWithError(
            embedMessage,
            `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Ç—Ä–µ–∫–∞: ${trackInfo.title} (ID —Ç—Ä–µ–∫–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω)`
          )
        }
        return false
      }

      const streamUrl = await this.yandexMusicService.getStreamUrl(accessToken, trackInfo.id)
      if (!streamUrl) {
        console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Ç—Ä–µ–∫–∞: ${trackInfo.title}`)
        if (embedMessage) {
          this.updateEmbedWithError(embedMessage, `–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Ç—Ä–µ–∫–∞: ${trackInfo.title}`)
        }
        return false
      }

      console.log(`–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –¥–ª—è —Ç—Ä–µ–∫–∞: ${trackInfo.title}`)
      console.log(`Stream URL: ${streamUrl}`)

      if (!opusscript) {
        console.warn('opusscript –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º')
      }

      const resource = createAudioResource(streamUrl, {
        inputType: StreamType.Arbitrary,
        inlineVolume: true,
        silencePaddingFrames: 5
      })

      if (resource.volume) {
        resource.volume.setVolume(0.8) // –ß—Ç–æ–± –Ω–µ –æ–≥–ª–æ—Ö–ª–∏
      }

      const guildId = embedMessage?.guild?.id
      if (guildId) {
        this.currentResources.set(guildId, resource)

        const playerState = this.playerStates.get(guildId)
        if (playerState) {
          if (playerState.currentTrack) {
            const currentTrackAsYandexTrack: IYandexTrack = {
              id: playerState.currentTrack.id,
              title: playerState.currentTrack.title,
              artists: [{ name: playerState.currentTrack.artist }],
              albums: [{ title: playerState.currentTrack.album }],
              coverUri: playerState.currentTrack.coverUrl?.replace('https://', '').replace('400x400', '%%') || ''
            }

            if (playerState.previousTracks.length >= 10) {
              playerState.previousTracks.shift()
            }

            playerState.previousTracks.push(currentTrackAsYandexTrack)
          }

          playerState.currentTrack = trackInfo
          playerState.isPlaying = true

          if (playerState.embedMessage && playerState.embedMessage.editable) {
            try {
              console.log('–û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞')
              const row = this.createControlButtons(true)
              await playerState.embedMessage.edit({ components: [row] })
              console.log('–ö–Ω–æ–ø–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã')
            } catch (error) {
              console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–Ω–æ–ø–æ–∫:', error)
            }
          }
        }
      }

      console.log(`–ù–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: ${trackInfo.title}`)
      console.log('–û–∂–∏–¥–∞–µ–º 2 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º...')

      resource.playStream.on('error', err => {
        console.error('–û—à–∏–±–∫–∞ –≤ –ø–æ—Ç–æ–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', err)
      })

      setTimeout(() => {
        try {
          console.log('–ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ...')
          player.play(resource)
          console.log(`–ö–æ–º–∞–Ω–¥–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è —Ç—Ä–µ–∫–∞: ${trackInfo.title}`)
        } catch (error) {
          const playError = error instanceof Error ? error : new Error(String(error))
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', playError)
          if (embedMessage) {
            this.updateEmbedWithError(embedMessage, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è: ${playError.message}`)
          }
        }
      }, 2000)

      if (guildId) {
        const currentPlayerState = this.playerStates.get(guildId)
        if (currentPlayerState && currentPlayerState.embedMessage) {
          this.updateEmbed(currentPlayerState.embedMessage, trackInfo)
        }
      } else {
        console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embed')
        return true
      }

      const playerState = this.playerStates.get(guildId)
      if (playerState) {
        playerState.trackStartTime = Date.now()
        if (trackInfo.id) {
          playerState.lastTrackId = trackInfo.id
        } else {
          playerState.lastTrackId = null
        }
        playerState.retryCount = 0
      }

      return true
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞:', error)
      if (embedMessage) {
        this.updateEmbedWithError(embedMessage, `–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞: ${trackInfo.title}`)
      }
      return false
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–æ–≤
   */
  public setupInfinitePlayback(
    player: AudioPlayer,
    accessToken: string,
    stationId: string,
    embedMessage: Message | undefined,
    initialTracks: IYandexTrack[]
  ) {
    const guildId = embedMessage?.guild?.id
    if (!guildId) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID —Å–µ—Ä–≤–µ—Ä–∞ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è')
      return
    }

    const playerState = this.playerStates.get(guildId)
    if (playerState) {
      playerState.trackQueue = [...initialTracks]
    }

    const loadMoreTracks = async () => {
      try {
        console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏...')
        const newTracks = await this.yandexMusicService.getStationTracks(accessToken, stationId)

        const playerState = this.playerStates.get(guildId)
        if (playerState && newTracks && newTracks.length > 0) {
          playerState.trackQueue.push(...newTracks)
          console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${newTracks.length} –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å`)
          return true
        }
        return false
      } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤:', error)
        return false
      }
    }

    player.removeAllListeners(AudioPlayerStatus.Idle)
    player.removeAllListeners('error')

    let isLoadingTrack = false
    const MIN_PLAY_TIME = 10000
    const MAX_RETRY_COUNT = 5

    player.on(AudioPlayerStatus.Playing, () => {
      console.log('–ü–ª–µ–µ—Ä –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Playing')

      const playerState = this.playerStates.get(guildId)
      if (playerState && playerState.currentTrack) {
        console.log(`–¢—Ä–µ–∫ "${playerState.currentTrack.title}" —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞–ª –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ`)
      }
    })

    player.on(AudioPlayerStatus.Buffering, () => {
      console.log('–ü–ª–µ–µ—Ä –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Buffering')
    })

    player.on(AudioPlayerStatus.AutoPaused, () => {
      console.log('–ü–ª–µ–µ—Ä –ø–µ—Ä–µ—à–µ–ª –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ AutoPaused')
    })

    player.on('error', error => {
      console.error('–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error)
      console.error('–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', JSON.stringify(error, null, 2))

      console.log('–¢–µ–∫—É—â–∏–π OPUS_ENGINE –ø—Ä–∏ –æ—à–∏–±–∫–µ:', process.env.OPUS_ENGINE)

      if (opusscript) {
        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π opusscript –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ –ø—Ä–∏ –æ—à–∏–±–∫–µ')
      } else {
        console.warn('opusscript –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º')
      }

      const playerState = this.playerStates.get(guildId)
      if (!playerState || !playerState.currentTrack) {
        console.log('–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–ª–µ–µ—Ä–∞ –∏–ª–∏ —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ')
        return
      }

      if (playerState.embedMessage && playerState.embedMessage.editable) {
        const errorEmbed = new EmbedBuilder()
          .setColor('#FFA500')
          .setTitle('‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞ —Å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º')
          .setDescription(
            `–í–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞ "${playerState.currentTrack.title}". –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å...`
          )
          .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞ - –ú–æ—è –≤–æ–ª–Ω–∞' })
          .setTimestamp()

        playerState.embedMessage.edit({ embeds: [errorEmbed] }).catch((error: Error) => {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embed —Å –æ—à–∏–±–∫–æ–π:', error)
        })
      }

      setTimeout(() => {
        if (playerState.retryCount < MAX_RETRY_COUNT && playerState.currentTrack) {
          console.log(
            `–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: ${playerState.currentTrack.title} (–ø–æ–ø—ã—Ç–∫–∞ ${playerState.retryCount + 1}/${MAX_RETRY_COUNT})`
          )
          playerState.retryCount++
          this.playTrack(player, playerState.currentTrack, accessToken, stationId, embedMessage)
        } else {
          // –ï—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É
          console.log('–ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É')
          isLoadingTrack = false
          player.emit(AudioPlayerStatus.Idle)
        }
      }, 5000)
    })

    player.on(AudioPlayerStatus.Idle, async () => {
      const playerState = this.playerStates.get(guildId)
      if (!playerState) return

      if (isLoadingTrack) {
        console.log('–£–∂–µ –∏–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ Idle')
        return
      }

      const currentTime = Date.now()
      const playTime = playerState.trackStartTime ? currentTime - playerState.trackStartTime : 0

      if (playerState.skipRequested) {
        console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è')
        playerState.skipRequested = false
      }
      // –ï—Å–ª–∏ —Ç—Ä–µ–∫ –∏–≥—Ä–∞–ª –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É –Ω–∞—Å –µ—Å—Ç—å —Ç–µ–∫—É—â–∏–π —Ç—Ä–µ–∫,
      // –∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞),
      // –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–ø—É—Å–∫ —Ç—Ä–µ–∫–∞,
      // –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –µ–≥–æ
      else if (
        playTime < MIN_PLAY_TIME &&
        playTime > 0 &&
        playerState.currentTrack &&
        playerState.retryCount < MAX_RETRY_COUNT
      ) {
        console.log(
          `–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞: ${playerState.currentTrack.title} –ø–æ—Å–ª–µ ${playTime}ms`
        )
        console.log(`–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è (${playerState.retryCount + 1}/${MAX_RETRY_COUNT})`)

        playerState.retryCount++

        if (playerState.retryCount >= MAX_RETRY_COUNT) {
          console.log(
            `–î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —Ç—Ä–µ–∫–∞: ${playerState.currentTrack.title}, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É`
          )

          isLoadingTrack = false

          if (playerState.trackQueue.length > 0) {
            const nextTrack = playerState.trackQueue.shift()
            if (nextTrack) {
              const nextTrackInfo = this.yandexMusicService.trackToTrackInfo(nextTrack)
              this.playTrack(player, nextTrackInfo, accessToken, stationId, embedMessage)
            }
          } else {
            loadMoreTracks().then(loaded => {
              if (loaded && playerState.trackQueue.length > 0) {
                const nextTrack = playerState.trackQueue.shift()
                if (nextTrack) {
                  const nextTrackInfo = this.yandexMusicService.trackToTrackInfo(nextTrack)
                  this.playTrack(player, nextTrackInfo, accessToken, stationId, embedMessage)
                }
              }
            })
          }
          return
        }

        if (playerState.embedMessage && playerState.embedMessage.editable) {
          const reconnectEmbed = new EmbedBuilder()
            .setColor('#FFA500')
            .setTitle('üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è')
            .setDescription(`–í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç—Ä–µ–∫–∞ "${playerState.currentTrack.title}"...`)
            .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞' })
            .setTimestamp()

          if (playerState.currentTrack.coverUrl) {
            reconnectEmbed.setThumbnail(playerState.currentTrack.coverUrl)
          }

          playerState.embedMessage.edit({ embeds: [reconnectEmbed] }).catch((error: Error) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏:', error)
          })
        }

        setTimeout(() => {
          if (playerState.currentTrack) {
            this.playTrack(player, playerState.currentTrack, accessToken, stationId, embedMessage)
          }
        }, 10000)

        return
      }

      console.log('–¢—Ä–µ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å')
      console.log(`–¢—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: ${playerState.trackQueue.length}`)

      if (playerState.trackQueue.length > 0) {
        isLoadingTrack = true

        try {
          const nextTrack = playerState.trackQueue.shift()
          if (nextTrack) {
            console.log(`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞: ${nextTrack.title}`)
            const nextTrackInfo = this.yandexMusicService.trackToTrackInfo(nextTrack)

            const success = await this.playTrack(player, nextTrackInfo, accessToken, stationId, embedMessage)
            if (!success) {
              console.log(`–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫: ${nextTrack.title}, –∂–¥–µ–º 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π`)

              setTimeout(() => {
                isLoadingTrack = false
                player.emit(AudioPlayerStatus.Idle)
              }, 2000)
            } else {
              isLoadingTrack = false
            }
          } else {
            isLoadingTrack = false
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', error)
          isLoadingTrack = false
        }
      } else {
        console.log('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏')

        isLoadingTrack = true

        try {
          const loaded = await loadMoreTracks()
          if (loaded) {
            setTimeout(() => {
              isLoadingTrack = false
              player.emit(AudioPlayerStatus.Idle)
            }, 1000)
          } else {
            console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ')
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ embedMessage –∏–∑ playerState, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–ª—è—Ç—å —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π –ø–æ—Å–ª–µ–¥–Ω–∏–π embed
            const currentPlayerState = this.playerStates.get(guildId)
            if (currentPlayerState && currentPlayerState.embedMessage && currentPlayerState.embedMessage.editable) {
              const finalEmbed = new EmbedBuilder()
                .setColor('#FF0000')
                .setTitle('‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
                .setDescription('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏.')
                .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞' })
                .setTimestamp()

              currentPlayerState.embedMessage.edit({ embeds: [finalEmbed], components: [] }).catch((error: Error) => {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embed:', error)
              })
            }
            isLoadingTrack = false
          }
        } catch (error) {
          console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤:', error)
          isLoadingTrack = false
        }
      }
    })
  }

  /**
   * –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
   */
  private startActivityChecks(guildId: string, voiceChannel: any) {
    this.clearActivityTimers(guildId)

    const checkInterval = setInterval(() => {
      const connection = this.connections.get(guildId)
      const playerState = this.playerStates.get(guildId)

      if (!connection || !playerState) {
        this.clearActivityTimers(guildId)
        return
      }

      const channel = voiceChannel.guild.channels.cache.get(connection.joinConfig.channelId)

      if (!channel || channel.type !== 2) {
        // 2 - —ç—Ç–æ —Ç–∏–ø –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        console.log(`–ö–∞–Ω–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥–æ–ª–æ—Å–æ–≤—ã–º: ${connection.joinConfig.channelId}`)
        return
      }

      const membersInChannel = channel.members.filter((member: { user: { bot: boolean } }) => !member.user.bot).size

      if (membersInChannel === 0) {
        console.log(`–ì–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª –ø—É—Å—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${guildId}`)

        if (!this.inactivityTimers.has(guildId)) {
          const timer = setTimeout(() => {
            console.log(`–¢–∞–π–º–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –∏—Å—Ç–µ–∫ –¥–ª—è ${guildId}, –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç –ø—É—Å—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞`)
            this.handleAutoDisconnect(guildId, '–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–∫–∏–Ω—É–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –∫–∞–Ω–∞–ª')
          }, this.EMPTY_CHANNEL_TIMEOUT)

          this.inactivityTimers.set(guildId, timer)
        }
      } else {
        if (this.inactivityTimers.has(guildId)) {
          console.log(`–í –∫–∞–Ω–∞–ª–µ –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è ${guildId}`)
          clearTimeout(this.inactivityTimers.get(guildId))
          this.inactivityTimers.delete(guildId)
        }
      }

      const player = this.players.get(guildId)
      if (
        (player && player.state.status === AudioPlayerStatus.Idle) ||
        player?.state.status === AudioPlayerStatus.Paused
      ) {
        if (!this.pauseTimers.has(guildId)) {
          console.log(`–ü–ª–µ–µ—Ä –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –º—É–∑—ã–∫—É, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è ${guildId}`)

          const timer = setTimeout(() => {
            console.log(`–¢–∞–π–º–µ—Ä –ø–∞—É–∑—ã –∏—Å—Ç–µ–∫ –¥–ª—è ${guildId}, –æ—Ç–∫–ª—é—á–∞–µ–º—Å—è –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è`)
            this.handleAutoDisconnect(guildId, '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –º—É–∑—ã–∫–∏')
          }, this.NO_PLAYBACK_TIMEOUT)

          this.pauseTimers.set(guildId, timer)
        }
      } else if (player && player.state.status === AudioPlayerStatus.Playing) {
        if (this.pauseTimers.has(guildId)) {
          console.log(`–ü–ª–µ–µ—Ä –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç –º—É–∑—ã–∫—É, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø–∞—É–∑—ã –¥–ª—è ${guildId}`)
          clearTimeout(this.pauseTimers.get(guildId))
          this.pauseTimers.delete(guildId)
        }
      }
    }, 5000)

    const existingIntervals = this.playerStates.get(guildId)?.checkIntervals || []

    if (this.playerStates.get(guildId)) {
      this.playerStates.get(guildId)!.checkIntervals = [
        ...existingIntervals,
        checkInterval as unknown as NodeJS.Timeout
      ]
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
   */
  private handleAutoDisconnect(guildId: string, reason: string) {
    const player = this.players.get(guildId)
    const connection = this.connections.get(guildId)
    const playerState = this.playerStates.get(guildId)

    if (!player || !connection || !playerState) {
      return
    }

    console.log(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è ${guildId}. –ü—Ä–∏—á–∏–Ω–∞: ${reason}`)

    if (playerState.embedMessage && playerState.embedMessage.editable) {
      const disconnectEmbed = new EmbedBuilder()
        .setColor('#FF0000')
        .setTitle('‚èπÔ∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ')
        .setDescription(`–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ: ${reason}`)
        .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞' })
        .setTimestamp()

      playerState.embedMessage.edit({ embeds: [disconnectEmbed], components: [] }).catch(error => {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–º –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏:', error)
      })
    }

    player.stop()
    connection.destroy()

    this.cleanupPlayer(guildId)
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–ª–µ–µ—Ä–∞
   */
  private cleanupPlayer(guildId: string) {
    this.clearActivityTimers(guildId)

    const playerState = this.playerStates.get(guildId)
    if (playerState && playerState.checkIntervals) {
      for (const interval of playerState.checkIntervals) {
        clearInterval(interval)
      }
    }

    this.players.delete(guildId)
    this.connections.delete(guildId)
    this.playerStates.delete(guildId)
    this.currentResources.delete(guildId)
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   */
  private clearActivityTimers(guildId: string) {
    if (this.inactivityTimers.has(guildId)) {
      clearTimeout(this.inactivityTimers.get(guildId))
      this.inactivityTimers.delete(guildId)
    }

    if (this.pauseTimers.has(guildId)) {
      clearTimeout(this.pauseTimers.get(guildId))
      this.pauseTimers.delete(guildId)
    }
  }
}
