import {
  ChatInputCommandInteraction,
  EmbedBuilder,
  SlashCommandBuilder,
  GuildMember,
  Message,
  TextChannel
} from 'discord.js'
import {
  AudioPlayerStatus,
  createAudioPlayer,
  createAudioResource,
  joinVoiceChannel,
  VoiceConnectionStatus,
  entersState,
  NoSubscriberBehavior,
  StreamType
} from '@discordjs/voice'
import axios from 'axios'
import { DatabaseService } from '../services/database.service.js'
import { IYandexTrackSequenceItem } from '../types/yandexTrack.js'

export const data = new SlashCommandBuilder()
  .setName('my-wave')
  .setDescription('–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫–∏ –∏–∑ "–ú–æ—è –≤–æ–ª–Ω–∞" –≤ –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–µ')

export async function execute(interaction: ChatInputCommandInteraction) {
  const userId = interaction.user.id
  const db = DatabaseService.getInstance()

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  if (!db.hasUserToken(userId)) {
    await interaction.reply({
      content: '–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/login` –¥–ª—è –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å.',
      ephemeral: true
    })
    return
  }

  const userData = db.getUserData(userId)
  if (!userData) {
    await interaction.reply({
      content:
        '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–π—Ç–∏ –∏ –≤–æ–π—Ç–∏ —Å–Ω–æ–≤–∞ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥ `/logout` –∏ `/login`.',
      ephemeral: true
    })
    return
  }

  if (!interaction.guild) {
    await interaction.reply({
      content: '–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.',
      ephemeral: true
    })
    return
  }

  // –ü–æ–ª—É—á–∞–µ–º –æ–±—ä–µ–∫—Ç GuildMember
  const member = interaction.member as GuildMember
  console.log(member.voice.channelId)

  if (!member.voice?.channel) {
    // –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —Å —Å–µ—Ä–≤–µ—Ä–∞
    const updatedMember = await interaction.guild.members
      .fetch({
        user: interaction.user.id,
        force: true // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –∫—ç—à
      })
      .catch(() => null)

    if (!updatedMember?.voice.channel) {
      await interaction.reply({
        content: '–í—ã –¥–æ–ª–∂–Ω—ã –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!',
        ephemeral: true
      })
      return
    }
  }

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π voiceChannel
  const voiceChannel: any =
    member.voice?.channel ||
    (
      await interaction.guild.members.fetch({
        user: interaction.user.id,
        force: true
      })
    ).voice.channel

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ
  const permissions = voiceChannel.permissionsFor(interaction.client.user.id)
  if (!permissions?.has('Connect') || !permissions?.has('Speak')) {
    await interaction.reply({
      content: '–£ –º–µ–Ω—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞—É–¥–∏–æ –≤ —ç—Ç–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ!',
      ephemeral: true
    })
    return
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  await interaction.reply({
    content: `–ü–æ–¥–∫–ª—é—á–∞—é—Å—å –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É "${voiceChannel.name}"...`,
    ephemeral: true
  })

  try {
    // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É
    const connection = joinVoiceChannel({
      channelId: voiceChannel.id,
      guildId: interaction.guild.id,
      adapterCreator: interaction.guild.voiceAdapterCreator
    })

    // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ –ø–ª–µ–µ—Ä
    const player = createAudioPlayer({
      behaviors: {
        noSubscriber: NoSubscriberBehavior.Play
      }
    })

    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–∞ –ø–ª–µ–µ—Ä
    connection.subscribe(player)

    // –û–∂–∏–¥–∞–µ–º —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–∞–Ω–∞–ª—É
    try {
      await entersState(connection, VoiceConnectionStatus.Ready, 5_000)
    } catch (connectionError) {
      connection.destroy()
      await interaction.followUp({
        content: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É!',
        ephemeral: true
      })
      return
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    connection.on(VoiceConnectionStatus.Disconnected, async () => {
      try {
        await Promise.race([
          entersState(connection, VoiceConnectionStatus.Signalling, 5_000),
          entersState(connection, VoiceConnectionStatus.Connecting, 5_000)
        ])
        // –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, –∑–Ω–∞—á–∏—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
      } catch (error) {
        // –ï—Å–ª–∏ –º—ã –¥–æ—à–ª–∏ –¥–æ —ç—Ç–æ–π —Ç–æ—á–∫–∏, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
        connection.destroy()
      }
    })

    // –°–æ–∑–¥–∞–µ–º embed –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–∫–µ
    const embed = new EmbedBuilder()
      .setColor('#FFCC00')
      .setTitle('üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç')
      .setDescription('–ó–∞–≥—Ä—É–∑–∫–∞ —Ç—Ä–µ–∫–∞...')
      .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞ - –ú–æ—è –≤–æ–ª–Ω–∞' })
      .setTimestamp()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º –∫–∞–Ω–∞–ª–æ–º, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π
    if (!interaction.channel || !('send' in interaction.channel)) {
      await interaction.followUp({
        content: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–∫–µ –≤ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª.',
        ephemeral: true
      })
      return
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º embed, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ–º –æ–±–Ω–æ–≤–ª—è—Ç—å
    const embedMessage = await interaction.channel.send({
      embeds: [embed]
    })

    try {
      const { accessToken } = userData
      const stationId = 'user:onyourwave'

      // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞–Ω—Ü–∏–∏ "–ú–æ—è –≤–æ–ª–Ω–∞"
      await getStationInfo(accessToken, stationId)

      // 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–¥–±—ç–∫ –æ –Ω–∞—á–∞–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏
      await sendStationStartedFeedback(accessToken, stationId)

      // 3. –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–∫–∏ —Å—Ç–∞–Ω—Ü–∏–∏
      const tracks = await getStationTracks(accessToken, stationId)
      if (!tracks || tracks.length === 0) {
        connection.destroy()
        await interaction.followUp({
          content: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ –∏–∑ "–ú–æ—è –≤–æ–ª–Ω–∞".',
          ephemeral: true
        })
        return
      }

      // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫ –∏–∑ —Å–ø–∏—Å–∫–∞
      const firstTrack = tracks[0]
      const trackInfo = {
        id: firstTrack.id,
        title: firstTrack.title,
        artist: firstTrack.artists.map((artist: { name: string }) => artist.name).join(', '),
        album: firstTrack.albums[0]?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª—å–±–æ–º',
        coverUrl: firstTrack.coverUri ? `https://${firstTrack.coverUri.replace('%%', '400x400')}` : null
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–¥–±—ç–∫ –æ –Ω–∞—á–∞–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
      await sendTrackStartedFeedback(accessToken, stationId, trackInfo.id)

      // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —Ç—Ä–µ–∫–∞
      const streamUrl = await getStreamUrl(accessToken, trackInfo.id)
      if (!streamUrl) {
        connection.destroy()
        await interaction.followUp({
          content: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —Ç—Ä–µ–∫–∞.',
          ephemeral: true
        })
        return
      }

      // –°–æ–∑–¥–∞–µ–º –∞—É–¥–∏–æ —Ä–µ—Å—É—Ä—Å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ URL
      try {
        console.log('–ü–æ–ª—É—á–µ–Ω URL –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞:', streamUrl)

        // –°–æ–∑–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ URL
        const resource = createAudioResource(streamUrl, {
          inputType: StreamType.Arbitrary
        })

        // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
        player.play(resource)

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π –ø–ª–µ–µ—Ä–∞
        player.on(AudioPlayerStatus.Playing, () => {
          console.log('–ù–∞—á–∞–ª–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞')
        })

        // –°–æ–∑–¥–∞–µ–º –æ—á–µ—Ä–µ–¥—å –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö —Ç—Ä–µ–∫–æ–≤
        const trackQueue = tracks.slice(1) // –ò—Å–∫–ª—é—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ç—Ä–µ–∫, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ –∏–≥—Ä–∞–µ—Ç

        // –û–±–Ω–æ–≤–ª—è–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–µ—Ä–≤–æ–º —Ç—Ä–µ–∫–µ
        updateEmbed(embedMessage, trackInfo)

        // –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è Idle, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
        player.removeAllListeners(AudioPlayerStatus.Idle)

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤
        const loadMoreTracks = async () => {
          try {
            console.log('–ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏ –¥–ª—è –æ—á–µ—Ä–µ–¥–∏...')
            const newTracks = await getStationTracks(accessToken, stationId)
            if (newTracks && newTracks.length > 0) {
              trackQueue.push(...newTracks)
              console.log(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${newTracks.length} –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥—å`)
              return true
            }
            return false
          } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö —Ç—Ä–µ–∫–æ–≤:', error)
            return false
          }
        }

        // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
        function updateEmbed(message: Message | undefined, trackInfo: any) {
          if (!message) return

          const updatedEmbed = new EmbedBuilder()
            .setColor('#FFCC00')
            .setTitle('üéµ –°–µ–π—á–∞—Å –∏–≥—Ä–∞–µ—Ç')
            .setDescription(`**${trackInfo.title}**\n–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${trackInfo.artist}\n–ê–ª—å–±–æ–º: ${trackInfo.album}`)
            .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞ - –ú–æ—è –≤–æ–ª–Ω–∞' })
            .setTimestamp()

          if (trackInfo.coverUrl) {
            updatedEmbed.setThumbnail(trackInfo.coverUrl)
          }

          message.edit({ embeds: [updatedEmbed] }).catch((error: Error) => {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embed:', error)
          })
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞
        player.on(AudioPlayerStatus.Idle, async () => {
          console.log('–¢—Ä–µ–∫ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—á–µ—Ä–µ–¥—å')
          console.log(`–¢—Ä–µ–∫–æ–≤ –≤ –æ—á–µ—Ä–µ–¥–∏: ${trackQueue.length}`)

          if (trackQueue.length > 0) {
            // –ë–µ—Ä–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
            const nextTrack = trackQueue.shift()
            if (nextTrack) {
              console.log(`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—é —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞: ${nextTrack.title}`)
              const nextTrackInfo = {
                id: nextTrack.id,
                title: nextTrack.title,
                artist: nextTrack.artists.map((artist: { name: string }) => artist.name).join(', '),
                album: nextTrack.albums[0]?.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–ª—å–±–æ–º',
                coverUrl: nextTrack.coverUri ? `https://${nextTrack.coverUri.replace('%%', '400x400')}` : null
              }

              try {
                // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∏–¥–±—ç–∫ –æ –Ω–∞—á–∞–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞
                await sendTrackStartedFeedback(accessToken, stationId, nextTrackInfo.id)

                // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ —Ç—Ä–µ–∫–∞
                const nextStreamUrl = await getStreamUrl(accessToken, nextTrackInfo.id)
                if (nextStreamUrl) {
                  // –°–æ–∑–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å –Ω–∞–ø—Ä—è–º—É—é –∏–∑ URL
                  const nextResource = createAudioResource(nextStreamUrl, {
                    inputType: StreamType.Arbitrary
                  })

                  // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∞—É–¥–∏–æ
                  player.play(nextResource)
                  console.log('–ù–∞—á–∞—Ç–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞')

                  // –û–±–Ω–æ–≤–ª—è–µ–º embed —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ–∫–µ
                  updateEmbed(embedMessage, nextTrackInfo)
                } else {
                  console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞')
                  // –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
                  player.emit(AudioPlayerStatus.Idle)
                }
              } catch (nextTrackError) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ç—Ä–µ–∫–∞:', nextTrackError)
                // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫
                player.emit(AudioPlayerStatus.Idle)
              }
            }
          } else {
            console.log('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞, –∑–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏')
            const loaded = await loadMoreTracks()
            if (loaded) {
              // –ï—Å–ª–∏ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏, –∑–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
              player.emit(AudioPlayerStatus.Idle)
            } else {
              console.log('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏, –∑–∞–≤–µ—Ä—à–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ')
              if (embedMessage) {
                const finalEmbed = new EmbedBuilder()
                  .setColor('#FF0000')
                  .setTitle('‚ö†Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ')
                  .setDescription('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ç—Ä–µ–∫–∏.')
                  .setFooter({ text: '–Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∞ - –ú–æ—è –≤–æ–ª–Ω–∞' })
                  .setTimestamp()

                embedMessage.edit({ embeds: [finalEmbed] }).catch((error: Error) => {
                  console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ embed:', error)
                })
              }
            }
          }
        })
      } catch (streamError) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—É–¥–∏–æ —Ä–µ—Å—É—Ä—Å–∞:', streamError)
        connection.destroy()
        await interaction.followUp({
          content: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–∫–∞.',
          ephemeral: true
        })
      }
    } catch (apiError: any) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å API –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏:', apiError)
      connection.destroy()
      await interaction.followUp({
        content: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å API –Ø–Ω–¥–µ–∫—Å –ú—É–∑—ã–∫–∏: ${apiError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
        ephemeral: true
      })
    }
  } catch (connectionError: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É:', connectionError)
    await interaction.followUp({
      content: `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –≥–æ–ª–æ—Å–æ–≤–æ–º—É –∫–∞–Ω–∞–ª—É: ${connectionError.message || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`,
      ephemeral: true
    })
  }
}

async function getStationInfo(token: string, stationId: string) {
  try {
    const response = await axios.get(`https://api.music.yandex.net/rotor/station/${stationId}/info`, {
      headers: {
        Authorization: `OAuth ${token}`
      }
    })
    return response.data
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç–∞–Ω—Ü–∏–∏:', error)
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞–Ω—Ü–∏–∏')
  }
}

async function sendStationStartedFeedback(token: string, stationId: string) {
  try {
    const now = new Date().toISOString().replace('Z', '')
    const response = await axios.post(
      `https://api.music.yandex.net/rotor/station/${stationId}/feedback`,
      {
        type: 'radioStarted',
        timestamp: now,
        from: 'ym-player-bot',
        totalPlayedSeconds: 0
      },
      {
        headers: {
          Authorization: `OAuth ${token}`,
          'Content-Type': 'application/json'
        }
      }
    )
    return response.data
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–¥–±—ç–∫–∞ –æ –Ω–∞—á–∞–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏:', error)
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–¥–±—ç–∫ –æ –Ω–∞—á–∞–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Å—Ç–∞–Ω—Ü–∏–∏')
  }
}

async function getStationTracks(token: string, stationId: string) {
  try {
    const response = await axios.get(`https://api.music.yandex.net/rotor/station/${stationId}/tracks?settings=2=true`, {
      headers: {
        Authorization: `OAuth ${token}`
      }
    })
    return response.data.result.sequence.map((track: IYandexTrackSequenceItem) => {
      return {
        id: track.track.id,
        title: track.track.title,
        artists: track.track.artists,
        albums: track.track.albums,
        coverUri: track.track.coverUri
      }
    })
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–µ–∫–æ–≤ —Å—Ç–∞–Ω—Ü–∏–∏:', error)
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–∫–∏ —Å—Ç–∞–Ω—Ü–∏–∏')
  }
}

async function sendTrackStartedFeedback(token: string, stationId: string, trackId: string) {
  try {
    const now = new Date().toISOString().replace('Z', '')
    const payload: any = {
      type: 'trackStarted',
      timestamp: now,
      from: 'ym-player-bot',
      totalPlayedSeconds: 0,
      trackId: trackId
    }
    const response = await axios.post(`https://api.music.yandex.net/rotor/station/${stationId}/feedback`, payload, {
      headers: {
        Authorization: `OAuth ${token}`,
        'Content-Type': 'application/json'
      }
    })
    return response.data
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∏–¥–±—ç–∫–∞ –æ –Ω–∞—á–∞–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞:', error)
    throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∏–¥–±—ç–∫ –æ –Ω–∞—á–∞–ª–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ç—Ä–µ–∫–∞')
  }
}

async function getStreamUrl(token: string, trackId: string): Promise<string | null> {
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞
    const downloadInfoResponse = await axios.get(`https://api.music.yandex.net/tracks/${trackId}/download-info`, {
      headers: {
        Authorization: `OAuth ${token}`
      }
    })
    if (
      !downloadInfoResponse.data ||
      !downloadInfoResponse.data.result ||
      downloadInfoResponse.data.result.length === 0
    ) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–≥—Ä—É–∑–∫–µ —Ç—Ä–µ–∫–∞')
      return null
    }
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–≥—Ä—É–∑–∫–∏ (–æ–±—ã—á–Ω–æ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞)
    const downloadInfo = downloadInfoResponse.data.result[0]
    // –ü–æ–ª—É—á–∞–µ–º URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏
    const downloadUrlResponse = await axios.get(`${downloadInfo.downloadInfoUrl}&format=json`, {
      headers: {
        Authorization: `OAuth ${token}`
      }
    })
    if (
      !downloadUrlResponse.data ||
      !downloadUrlResponse.data.host ||
      !downloadUrlResponse.data.path ||
      !downloadUrlResponse.data.s
    ) {
      console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç—Ä–µ–∫–∞')
      return null
    }
    // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π URL –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞
    const streamUrl = `https://${downloadUrlResponse.data.host}/get-mp3/${downloadUrlResponse.data.s}/${downloadUrlResponse.data.ts}${downloadUrlResponse.data.path}`
    return streamUrl
  } catch (error: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ URL –¥–ª—è —Å—Ç—Ä–∏–º–∏–Ω–≥–∞:', error)
    return null
  }
}
